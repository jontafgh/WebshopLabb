// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebshopBackend;

#nullable disable

namespace WebshopBackend.Migrations
{
    [DbContext(typeof(WebshopContext))]
    [Migration("20250305013024_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebshopBackend.Models.Boardgame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("int");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Boardgames");
                });

            modelBuilder.Entity("WebshopBackend.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PriceId")
                        .IsUnique()
                        .HasFilter("[PriceId] IS NOT NULL");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("WebshopBackend.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageLargeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMediumUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSmallUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebshopBackend.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Regular")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("WebshopBackend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebshopBackend.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoardgameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId")
                        .IsUnique()
                        .HasFilter("[BoardgameId] IS NOT NULL");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("WebshopBackend.Models.Restock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RestockDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId")
                        .IsUnique()
                        .HasFilter("[StockId] IS NOT NULL");

                    b.ToTable("Restock");
                });

            modelBuilder.Entity("WebshopBackend.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("WebshopBackend.Models.Boardgame", b =>
                {
                    b.HasOne("WebshopBackend.Models.Product", "Product")
                        .WithOne()
                        .HasForeignKey("WebshopBackend.Models.Boardgame", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebshopBackend.Models.Discount", b =>
                {
                    b.HasOne("WebshopBackend.Models.Price", "Price")
                        .WithOne("Discount")
                        .HasForeignKey("WebshopBackend.Models.Discount", "PriceId");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("WebshopBackend.Models.Image", b =>
                {
                    b.HasOne("WebshopBackend.Models.Product", "Product")
                        .WithOne("Image")
                        .HasForeignKey("WebshopBackend.Models.Image", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebshopBackend.Models.Price", b =>
                {
                    b.HasOne("WebshopBackend.Models.Product", "Product")
                        .WithOne("Price")
                        .HasForeignKey("WebshopBackend.Models.Price", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebshopBackend.Models.Publisher", b =>
                {
                    b.HasOne("WebshopBackend.Models.Boardgame", "Boardgame")
                        .WithOne("Publisher")
                        .HasForeignKey("WebshopBackend.Models.Publisher", "BoardgameId");

                    b.Navigation("Boardgame");
                });

            modelBuilder.Entity("WebshopBackend.Models.Restock", b =>
                {
                    b.HasOne("WebshopBackend.Models.Stock", "Stock")
                        .WithOne("NextRestock")
                        .HasForeignKey("WebshopBackend.Models.Restock", "StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("WebshopBackend.Models.Stock", b =>
                {
                    b.HasOne("WebshopBackend.Models.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("WebshopBackend.Models.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebshopBackend.Models.Boardgame", b =>
                {
                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("WebshopBackend.Models.Price", b =>
                {
                    b.Navigation("Discount");
                });

            modelBuilder.Entity("WebshopBackend.Models.Product", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Price");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("WebshopBackend.Models.Stock", b =>
                {
                    b.Navigation("NextRestock");
                });
#pragma warning restore 612, 618
        }
    }
}
