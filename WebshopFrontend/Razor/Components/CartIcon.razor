@inject ICounterService CounterService

<NavLink href="checkout" class="text-gray">
    <div class="hover-to-black align-children-center">
        <div class="cart-badge text-medium text-bold">
            @_noOfItemsInCart
        </div>
        <i class="fa fa-shopping-cart"></i>
    </div>
</NavLink>

@code {
    [Inject(Key = "Local")] public ICartService LocalCartService { get; set; } = null!;

    private int _noOfItemsInCart = 0;

    protected override void OnInitialized()
    {
        CounterService.CounterChanged += UpdateCartCounter;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cart = await LocalCartService.GetCart();
            CounterService.SetCount(cart.Sum(c => c.Quantity));
        }
    }

    private async void UpdateCartCounter(object? sender, int newCount)
    {
        try
        {
            await InvokeAsync(() =>
            {
                _noOfItemsInCart = newCount;
                StateHasChanged();
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
