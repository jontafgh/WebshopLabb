@inject IUserService UserService
@inject ICounterService CounterService

<div class="login-box padding-y padding-x-16 border">
    <AuthorizeView>
        <Authorized>
            <LogoutButton />
        </Authorized>
        <NotAuthorized>

            <EditForm Model="LoginDto" OnValidSubmit="LogIn" FormName="Login" Context="loginFormContext">
                <DataAnnotationsValidator />

                <div class="padding-y">
                    <label for="email">
                        Email:
                        <InputText @bind-value="@LoginDto.Email"
                        id="email"
                        class="input-text"
                        placeholder="name@example.com"></InputText>
                    </label>
                    <ValidationMessage For="() => LoginDto.Email" class="red" />
                </div>

                <div class="padding-y">
                    <label for="password">
                        Password:
                        <InputText @bind-value="@LoginDto.Password"
                        id="password"
                        type="password"
                        class="input-text"
                        placeholder="password"></InputText>
                    </label>
                    <ValidationMessage For="() => LoginDto.Password"
                    class="red" />
                </div>

                <button type="submit" class="button-fit padding-x padding-y text-large">
                    Log In
                </button>
            </EditForm>

            @foreach (var error in _registerLoginResponseDto.ErrorList)
            {
                <p class="validation-message">@error</p>
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Inject(Key = "Local")] public ICartService LocalCartService { get; set; } = null!;
    [Inject(Key = "Api")] public ICartService ApiCartService { get; set; } = null!;

    [SupplyParameterFromForm] private LoginDto LoginDto { get; set; } = new();

    private RegisterLoginResponseDto _registerLoginResponseDto = new();

    [Parameter] public EventCallback OnLogin { get; set; }

    private async Task LogIn()
    {
        _registerLoginResponseDto = await UserService.LoginAsync(LoginDto);

        if (_registerLoginResponseDto.Succeeded)
        {
            await UpdateCart();
        }

        if (_registerLoginResponseDto.Succeeded)
        {
            await OnLogin.InvokeAsync();
        }
    }

    private async Task UpdateCart()
    {
        await ApiCartService.SetCart();

        var apiCart = await ApiCartService.GetCart();
        var localCart = await LocalCartService.GetCart();
        var cart = apiCart.Concat(localCart).DistinctBy(c => c.ArtNr).ToList();
        await LocalCartService.UpdateCart(cart);

        CounterService.SetCount(cart.Sum(c => c.Quantity));
    }
}
