@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICounterService CounterService
@inject IApiService WebshopApiService
@inject ICartService CartService

<div class="login-box padding-y padding-x-16 border white">
    <AuthorizeView>
        <Authorized>
            <LogoutButton />
        </Authorized>
        <NotAuthorized>

            <EditForm Model="LoginDto" OnValidSubmit="LogIn" FormName="Login" Context="loginFormContext">
                <DataAnnotationsValidator />

                <div class="padding-y">
                    <label for="email">
                        Email:
                        <InputText @bind-value="@LoginDto.Email"
                                   id="email"
                                   class="input-text"
                                   placeholder="name@example.com"></InputText>
                    </label>
                    <ValidationMessage For="() => LoginDto.Email" class="text-red" />
                </div>

                <div class="padding-y">
                    <label for="password">
                        Password:
                        <InputText @bind-value="@LoginDto.Password"
                                   id="password"
                                   type="password"
                                   class="input-text"
                                   placeholder="password"></InputText>
                    </label>
                    <ValidationMessage For="() => LoginDto.Password"
                                       class="text-red" />
                </div>

                <button type="submit" class="button-fit padding-x padding-y text-large">
                    Log In
                </button>
            </EditForm>

            <div class="padding-y">
                <ul class="error-list text-red">
                    @foreach (var error in _registerLoginResponseDto.ErrorList)
                    {
                        <li class="text-red">@error</li>
                    }
                </ul>
            </div>

        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [SupplyParameterFromForm] private LoginDto LoginDto { get; set; } = new();

    private RegisterLoginResponseDto _registerLoginResponseDto = new();

    [Parameter] public EventCallback<bool> OnLogin { get; set; }

    private async Task LogIn()
    {
        _registerLoginResponseDto = await ((TokenAuthenticationStateProvider)AuthenticationStateProvider).LoginAsync(LoginDto);

        if (_registerLoginResponseDto.Succeeded)
        {
            await UpdateCart();

        }

        if (_registerLoginResponseDto.Succeeded)
        {
            await OnLogin.InvokeAsync(true);
        }
    }

    private async Task UpdateCart()
    {
        var result = await WebshopApiService.GetAsync<CartDto>(WebshopApiEndpoints.GetCart);

        var apiCart = new CartDto();

        if (result is { IsSuccess: true, Data: not null })
        {
            apiCart = result.Data;
        }

        var localCart = await CartService.GetCart();
        var cart = apiCart.CartItems.Concat(localCart).DistinctBy(c => c.ArtNr).ToList();

        await CartService.SetCart(cart);
        CounterService.SetCount(cart.Sum(c => c.Quantity));
    }
}
