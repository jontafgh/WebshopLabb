@inject IJSRuntime Js
@inject ICounterService CartCounterService
@inject ICartService CartService

<button class="@GetButtonClasses()" @onclick="AddToCart">
    <span>@GetButtonText()</span>
</button>

@code {

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Parameter] public required ProductDto Product { get; set; }

    private async Task AddToCart()
    {
        if (Product.Stock.Quantity <= 0) return;

        var cartId = await GetCartId();

        await CartService.AddItem(Product, 1, cartId);
        CartCounterService.AddToCount(1);
    }

    private string GetButtonText()
    {
        if (Product.Stock.Quantity > 0)
        {
            return "Add to cart";
        }

        if (Product.Stock is { Quantity: 0, NextRestock: not null })
        {
            return "Reserve";
        }

        return "Out of stock";
    }

    private string GetButtonClasses()
    {
        const string defaultClasses = "text-center text-large button-cart";

        if (Product.Stock.Quantity > 0)
        {
            return defaultClasses + " button-color-green";
        }

        if (Product.Stock is { Quantity: 0, NextRestock: not null })
        {
            return defaultClasses + " button-color-yellow";
        }

        return defaultClasses + " button-color-red";
    }

    private async Task<string> GetCartId()
    {
        if (AuthenticationState == null) return string.Empty;

        var authState = await AuthenticationState;

        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
            return authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? string.Empty;

        return string.Empty;
    }
}
