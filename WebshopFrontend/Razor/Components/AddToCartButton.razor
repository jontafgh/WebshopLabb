@inject IJSRuntime Js
@inject ICounterService CartCounterService

<button class="@GetButtonClasses()" @onclick="AddToCart">
    <span>@GetButtonText()</span>
</button>

@code {
    [Inject(Key = "Local")] public ICartService LocalCartService { get; set; } = null!;

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Parameter] public required int ProductId { get; set; }
    [Parameter] public required int Stock { get; set; }

    private string _cartId = string.Empty;

    private const int Quantity = 1;

    private async Task AddToCart()
    {
        _cartId = await GetCartId();
        var cartItem = await LocalCartService.AddItem(ProductId, Quantity, _cartId);
        if (cartItem.Id != 0) CartCounterService.AddToCount(Quantity);
    }

    private string GetButtonText() => Stock > 0 ? "Buy" : "Reserve";

    private string GetButtonClasses()
    {
        const string defaultClasses = "text-center text-xlarge text-bold button-block";
        var addedClass = Stock > 0 ? " button-buy" : " button-reserve";

        return defaultClasses + addedClass;
    }

    private async Task<string> GetCartId()
    {
        if (AuthenticationState == null) return string.Empty;
        var authState = await AuthenticationState;
        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
            return authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        return string.Empty;
    }
}
