@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="login-box padding-y padding-x-16 white border">
    <AuthorizeView>
        <Authorized>
            <LogoutButton />
        </Authorized>
        <NotAuthorized>
            @if (_registerLoginResponseDto.Succeeded)
            {
                <p>Registration successful</p>
            }
            else
            {
                <EditForm Model="RegisterUserDto" OnValidSubmit="RegisterUser" FormName="RegisterUser" Context="registerFormContext">
                    <DataAnnotationsValidator />

                    <div class="padding-y">
                        <label for="email">
                            Email:
                            <InputText @bind-value="@RegisterUserDto.Email"
                                       id="email"
                                       class="input-text"
                                       placeholder="name@example.com" />
                        </label>
                        <ValidationMessage For="() => RegisterUserDto.Email" class="text-red" />
                    </div>

                    <div class="padding-y">
                        <label for="password">
                            Password:
                            <InputText @bind-value="@RegisterUserDto.Password"
                                       type="password"
                                       id="password"
                                       class="input-text"
                                       placeholder="password" />
                        </label>
                        <ValidationMessage For="() => RegisterUserDto.Password" class="text-red" />
                    </div>

                    <div class="padding-y">
                        <label for="comfirmpassword">
                            Comfirm Password:
                            <InputText @bind-value="@RegisterUserDto.ComfirmPassword"
                                       type="password"
                                       id="comfirmpassword"
                                       class="input-text"
                                       placeholder="password" />
                        </label>
                        <ValidationMessage For="() => RegisterUserDto.ComfirmPassword" class="text-red" />
                    </div>

                    <button type="submit" class="button-fit padding-x padding-y text-large">
                        Register
                    </button>
                </EditForm>
                <div class="padding-y">
                    <ul class="text-red error-list">
                        @foreach (var error in _registerLoginResponseDto.ErrorList)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
               
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter] public EventCallback OnRegistered { get; set; }

    [SupplyParameterFromForm] private RegisterUserDto RegisterUserDto { get; set; } = new();

    private RegisterLoginResponseDto _registerLoginResponseDto = new();

    private async Task RegisterUser()
    {
        _registerLoginResponseDto = await ((TokenAuthenticationStateProvider)AuthenticationStateProvider).RegisterAsync(RegisterUserDto);

        if (_registerLoginResponseDto.Succeeded)
        {
            await OnRegistered.InvokeAsync();
        }
    }
}
