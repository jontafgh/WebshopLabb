@page "/checkout"
@inject IOrderService OrderService
@inject ICounterService CounterService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Checkout</PageTitle>
<PageHeading>Checkout</PageHeading>

@if (_orderSubmitted)
{
    <AuthorizeView>
        <OrderDetails Order="_order" UserDetails="_userDetails" />
    </AuthorizeView>
}
else
{ 
    <Cart OnEmptyCart="ChangePlaceOrderButtonStyle" />

    <AuthorizeView>
        <Authorized>

            @if (_userDetailsFormShown)
            {
                <ImportantInfoBox>Please comfirm your shipping details</ImportantInfoBox>
                <UserDetailsForm OnFormSubmit="PrepareOrder"/>
            }
            else
            {
                <div class="padding-x padding-y white border">
                    <button type="button" class="button-fit padding-x padding-y text-large" @onclick="ShowUserDetailsForm">Show form</button>
                </div>
                <div class="padding-x padding-y white border">
                    <button type="button" class="button-fit padding-x padding-y text-large @_placeOrderButtonStyle" @onclick="PlaceOrder">Place order</button>
                </div>
            }
            
            @if (!_order.Valid)
            {
                <ImportantInfoBox>
                    <ul>
                        @foreach (var error in _order.Errors)
                        {
                            <li class="text-red">@error</li>
                        }
                    </ul>
                </ImportantInfoBox>
            }

        </Authorized>
        <NotAuthorized>

            <ImportantInfoBox>Please log in to continue</ImportantInfoBox>
            <LoginBox OnLogin="() => NavigationManager.Refresh(true)"/>

        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Inject(Key = "Local")] public ICartService LocalCartService { get; set; } = null!;
    [Inject(Key = "Api")] public ICartService ApiCartService { get; set; } = null!;

    private UserDetailsDto _userDetails = new();
    private OrderDto _order = new();
    private bool _orderSubmitted;
    private bool _userDetailsFormShown = true;
    private string _placeOrderButtonStyle = string.Empty;
    private List<CartItemDto> _cart = [];

    private async Task PrepareOrder(UserDetails userDetails)
    {
        _userDetails = await UserService.UpdateUserDetails(userDetails);
        _userDetailsFormShown = false;
    }

    private async Task PlaceOrder()
    {
        _cart = await LocalCartService.GetCart();

        if (_cart.Any())
        {
            _order = await OrderService.PlaceOrder(_cart);

            if (_order.Valid)
            {
                await LocalCartService.ClearCart();
                await ApiCartService.ClearCart();
                CounterService.SetCount(0);
                _orderSubmitted = true;
            }
        }
    }

    private void ShowUserDetailsForm()
    {
        _userDetailsFormShown = !_userDetailsFormShown;
    }

    private void ChangePlaceOrderButtonStyle()
    {
        _placeOrderButtonStyle = "button-denied ";
    }

}
