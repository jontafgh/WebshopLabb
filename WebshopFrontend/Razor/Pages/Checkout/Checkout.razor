@page "/checkout"
@inject IOrderService OrderService
@inject ICounterService CounterService
@inject IUserService UserService

<PageTitle>Checkout</PageTitle>
<PageHeading>Checkout</PageHeading>

@if (_orderSubmitted)
{
    <AuthorizeView>
        <OrderDetails Order="_order" UserDetails="_userDetails" />
    </AuthorizeView>
}
else
{
    <Cart OnEmptyCart="ChangePlaceOrderButtonStyle" />
    <AuthorizeView>
        <Authorized>
            @if (_formShown)
            {
                <ImportantInfoBox>Please comfirm your shipping details</ImportantInfoBox>
                <UserDetailsForm OnFormSubmit="PrepareOrderDetails" />
            }
            else
            {
                <div class="padding-x padding-y white border">
                    <button type="button" class="button-fit padding-x padding-y text-large" @onclick="ShowUserDetailsForm">Show form</button>
                </div>
                <div class="padding-x padding-y white border">
                    <button type="button" class="button-fit padding-x padding-y text-large @_placeOrderButtonStyle" @onclick="PlaceOrder">Place order</button>
                </div>
            }

        </Authorized>
        <NotAuthorized>
            <ImportantInfoBox>Please log in to continue</ImportantInfoBox>
            <LoginBox OnLogin="UpdateComponent" />

        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Inject(Key = "Local")] public ICartService LocalCartService { get; set; } = null!;
    [Inject(Key = "Api")] public ICartService ApiCartService { get; set; } = null!;

    private UserDetailsDto _userDetails = new();
    private OrderDto _order = new();
    private bool _orderSubmitted;
    private bool _formShown = true;
    private string _placeOrderButtonStyle = string.Empty;
    private List<CartItemDto> _cart = [];

    private async Task PrepareOrderDetails(UserDetails userDetails)
    {
        _userDetails = await UserService.UpdateUserDetails(userDetails);
        _cart = await LocalCartService.GetCart();
        _formShown = false;
    }

    private async Task PlaceOrder()
    {
        if (_cart.Any())
        {
            _order = await OrderService.PlaceOrder(_cart);
            await LocalCartService.ClearCart();
            await ApiCartService.ClearCart();
            CounterService.SetCount(0);
            _orderSubmitted = true;
        }
    }

    private void ShowUserDetailsForm()
    {
        _formShown = !_formShown;
    }

    private void UpdateComponent()
    {
        StateHasChanged();
    }

    private void ChangePlaceOrderButtonStyle()
    {
        _placeOrderButtonStyle = "no-items-in-cart ";
    }

}
