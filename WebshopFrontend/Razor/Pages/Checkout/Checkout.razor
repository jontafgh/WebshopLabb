@page "/checkout"
@inject ICounterService CounterService
@inject IApiSevice WebshopApiSevice
@inject NavigationManager NavigationManager

<PageTitle>Checkout</PageTitle>
<PageHeading>Checkout</PageHeading>

@if (_order is not null)
{
    <AuthorizeView>
        @if (_order.Valid)
        {
            <OrderDetails Order="_order" UserDetails="_userDetails" />
        }
        else
        {
            <ImportantInfoBox>
                <ul>
                    @foreach (var error in _order.Errors)
                    {
                        <li class="text-red">@error</li>
                    }
                </ul>
            </ImportantInfoBox>
        }
    </AuthorizeView>
}
else
{
    <Cart OnEmptyCart="ChangePlaceOrderButtonStyle" />

    <AuthorizeView>
        <Authorized>

            @if (_userDetailsFormShown)
            {
                <ImportantInfoBox>Please comfirm your shipping details</ImportantInfoBox>
                <UserDetailsForm OnFormSubmit="PrepareOrder" />
            }
            else
            {
                <div class="padding-x padding-y white border">
                    <button type="button" class="button-fit padding-x padding-y text-large" @onclick="ShowUserDetailsForm">Show form</button>
                </div>
                <div class="padding-x padding-y white border">
                    <button type="button" class="button-fit padding-x padding-y text-large @_placeOrderButtonStyle" @onclick="PlaceOrder">Place order</button>
                </div>
            }

            @if (_orderErrorMessage is not null)
            {
                <ImportantInfoBox>
                    <h4>Order failed</h4>
                    <p>@_orderErrorMessage</p>
                </ImportantInfoBox>
            }

        </Authorized>
        <NotAuthorized>

            <ImportantInfoBox>Please log in to continue</ImportantInfoBox>
            <LoginBox OnLogin="() => NavigationManager.Refresh(true)" />

        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Inject(Key = "Local")] public ICartService LocalCartService { get; set; } = null!;   

    private UserDetailsDto? _userDetails;
    private string? _orderErrorMessage;
    private OrderDto? _order;
    private bool _userDetailsFormShown = true;
    private string _placeOrderButtonStyle = string.Empty;
    private List<CartItemDto> _cart = [];

    private async Task PrepareOrder(UserDetailsDto userDetails)
    {
        var result = await WebshopApiSevice.PutAsync<UserDetailsDto, UserDetailsDto>(WebshopApiEndpoints.PutUser, userDetails);

        if (result.IsSuccess)
        {
            _userDetails = result.Data;
            _userDetailsFormShown = false;
        }
    }

    private async Task PlaceOrder()
    {
        _cart = await LocalCartService.GetCart();
        var order = new PlaceOrderDto { CartItems = _cart };

        if (_cart.Any())
        {
            var orderResult = await WebshopApiSevice.PostAsync<OrderDto, PlaceOrderDto>(WebshopApiEndpoints.PostOrder, order);

            if (!orderResult.IsSuccess)
            {
                _orderErrorMessage = orderResult.ErrorMessage;
            }
            else
            {
                _order = orderResult.Data;

                if (_order is not null && _order.Valid)
                {
                    await WebshopApiSevice.DeleteAsync<string>(WebshopApiEndpoints.DeleteCart);
                    await LocalCartService.ClearCart();
                    CounterService.SetCount(0);
                }
            }
        }
    }

    private void ShowUserDetailsForm()
    {
        _userDetailsFormShown = !_userDetailsFormShown;
    }

    private void ChangePlaceOrderButtonStyle()
    {
        _placeOrderButtonStyle = "button-denied ";
    }

}
