@inject IApiService WebshopApiService
@inject IExchangeRateService ExchangeRateService

@if (Order == null)
{
    <p>Loading...</p>
}
else
{
    <ProductTable Items="Order.CartItems" Context="orderLine" Caption="Order summary">
        <TableHeader>
            <th>Product</th>
            <th>ArNr</th>
            <th>Price<em class="text-small"> @ExchangeRate.Key</em></th>
            <th>Quantity</th>
        </TableHeader>
        <RowTemplate>
            <td data-label="Product">@orderLine.Name</td>
            <td data-label="ArtNr">@orderLine.ArtNr</td>
            <td data-label="Price">@((orderLine.Price * ExchangeRate.Value).ToString("N2"))</td>
            <td data-label="Quantity">@orderLine.Quantity</td>
        </RowTemplate>
        <TableFooter>
            <th colspan="3">Total: </th>
            <td>@GetTotalPrice().ToString("N2")</td>
        </TableFooter>
    </ProductTable>

    if (UserDetails == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="white padding-x padding-y margin-y border">
            
            <h4>Confirmation email sent to:</h4>
            <p>@UserDetails.Email</p>           
        </div>

        <UserDetailsTable UserDetails="UserDetails" Caption="Delivery address" />
    }
}

@code {
    [Parameter] public int OrderId { get; set; }
    [Parameter] public OrderDto? Order { get; set; }
    [Parameter] public UserDetailsDto? UserDetails { get; set; }

    private KeyValuePair<string, decimal> ExchangeRate { get; set; }

    protected override void OnInitialized()
    {
        ExchangeRateService.ExchangeRateChanged += UpdatePrice;
        ExchangeRate = ExchangeRateService.GetCurrentRate();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Order == null && OrderId != 0)
        {
            var orderResult = await WebshopApiService.GetAsync<OrderDto>(string.Format(WebshopApiEndpoints.GetOrder, OrderId));

            if (orderResult.IsSuccess)
                Order = orderResult.Data;
        }

        if (UserDetails == null)
        {
            var userResult = await WebshopApiService.GetAsync<UserDetailsDto>(WebshopApiEndpoints.GetUser);

            if (userResult.IsSuccess)
                UserDetails = userResult.Data;
        }
    }

    private decimal GetTotalPrice() => Order!.CartItems.Sum(x => x.Price * x.Quantity * ExchangeRate.Value);

    private async void UpdatePrice(object? sender, KeyValuePair<string, decimal> exchangeRate)
    {
        try
        {
            await InvokeAsync(() =>
            {
                ExchangeRate = exchangeRate;
                StateHasChanged();
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
