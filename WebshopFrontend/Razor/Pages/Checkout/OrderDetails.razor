@inject IOrderService OrderService
@inject IUserService UserService

@if (Order == null)
{
    <p>Loading...</p>
}
else
{
    <ProductTable Items="Order.CartItems" Context="orderLine" Caption="Order summary">
        <TableHeader>
            <th>Product</th>
            <th>ArNr</th>
            <th>Price</th>
            <th>Quantity</th>
        </TableHeader>
        <RowTemplate>
            <td data-label="Product">@orderLine.Name</td>
            <td data-label="ArtNr">@orderLine.ArtNr</td>
            <td data-label="Price">@orderLine.Price</td>
            <td data-label="Quantity">@orderLine.Quantity</td>
        </RowTemplate>
        <TableFooter>
            <th colspan="3">Total: </th>
            <td>@GetTotalPrice()</td>
        </TableFooter>
    </ProductTable>

    if (UserDetails == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="white padding-x padding-y margin-y border">
            <div>
                <h4>Confirmation email sent to:</h4>
                <p>@UserDetails.Email</p>
            </div>
            <div>
                <h4>Order will be sent to:</h4>
                <ul>
                    <li>@UserDetails.FirstName @UserDetails.LastName</li>
                    <li>@UserDetails.Address!.Street</li>
                    <li>@UserDetails.Address.PostalCode @UserDetails.Address.City</li>
                    <li>@UserDetails.Address.Country</li>
                </ul>
            </div>
        </div>
    }
}

@code {
    [Parameter] public int OrderId { get; set; }
    [Parameter] public OrderDto? Order { get; set; }
    [Parameter] public UserDetailsDto? UserDetails { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Order == null && OrderId != 0)
            Order = await OrderService.GetOrder(OrderId);         

        UserDetails ??= await UserService.GetUserDetails();
    }

    private decimal GetTotalPrice() => Order!.CartItems.Sum(x => x.Price * x.Quantity);
}
