@inject ICounterService CounterService
@inject IExchangeRateService ExchangeRateService
@inject IApiService WebshopApiService
@inject ICartService CartService

@if (CartItems.Count == 0)
{
    <ImportantInfoBox>There are no products in the cart</ImportantInfoBox>
}
else
{
    <ProductTable Caption="Products in cart" Items="CartItems" Context="cartItem">
        <TableHeader>
            <th>Product</th>
            <th>ArNr</th>
            <th>Price <em class="text-small">@ExchangeRate.Key</em></th>
            <th>Total</th>
            <th>Quantity</th>
            <th></th>
        </TableHeader>
        <RowTemplate>
            <td data-label="Product">@cartItem.Name</td>
            <td data-label="ArNr">@cartItem.ArtNr</td>
            <td data-label="Price">@((cartItem.Price * ExchangeRate.Value).ToString("N2"))</td>
            <td data-label="Total">@((cartItem.Quantity * cartItem.Price * ExchangeRate.Value).ToString("N2"))</td>
            <td data-label="Quantity">@cartItem.Quantity</td>
            <td data-label="">
                <button class="button-cart-table">
                    <i class="fa fa-plus" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(1, cartItem.Id))"></i>
                </button>

                <button class="margin-x button-cart-table">
                    <i class="fa fa-minus" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(-1, cartItem.Id))"></i>
                </button>

                <button class="button-cart-table">
                    <i class="fa fa-times" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(0, cartItem.Id))"></i>
                </button>
            </td>
        </RowTemplate>
        <TableFooter>
            <th colspan="5">Total: </th>
            <td>
                @GetTotalPrice().ToString("N2")
            </td>
        </TableFooter>
    </ProductTable>
}

@code {
    [Parameter] public EventCallback<bool> OnEmptyCart { get; set; }

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public List<CartItemDto> CartItems { get; set; } = [];

    private KeyValuePair<string, decimal> ExchangeRate { get; set; }

    protected override void OnInitialized()
    {
        ExchangeRateService.ExchangeRateChanged += UpdatePrice;
        ExchangeRate = ExchangeRateService.GetCurrentRate();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CartItems = await CartService.GetCart();
            await InvokeAsync(StateHasChanged);
        }
        if (CartItems.Count == 0 && firstRender)
        {
            await OnEmptyCart.InvokeAsync(true);
        }
    }
    
    private decimal GetTotalPrice() => CartItems.Sum(cartItem => cartItem.Quantity * cartItem.Price * ExchangeRate.Value);

    private async Task UpdateProductQuantity(int action, int id)
    {
        var cartItem = CartItems.First(cartItem => cartItem.Id == id);

        switch (action)
        {
            case 1:
                IncrementQuantity(cartItem);
                break;
            case -1:
                DecrementQuantity(cartItem);
                break;
            case 0:
                RemoveItem(cartItem);
                break;
        }

        await UpdateCartAsync();

        if(!CartItems.Any())
            await OnEmptyCart.InvokeAsync(true);

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateCartAsync()
    {
        await CartService.UpdateCart(CartItems);
        await UpdateUserCart();
        CartItems = await CartService.GetCart();
    }

    private void RemoveItem(CartItemDto cartItem)
    {
        CounterService.AddToCount(-cartItem.Quantity);
        CartItems.Remove(cartItem);
    }

    private void IncrementQuantity(CartItemDto cartItem)
    {
        cartItem.Quantity++;
        CounterService.AddToCount(1);
    }

    private void DecrementQuantity(CartItemDto cartItem)
    {
        if (cartItem.Quantity > 1)
        {
            cartItem.Quantity--;
            CounterService.AddToCount(-1);
        }
        else
        {
            RemoveItem(cartItem);
        }
    }

    private async Task UpdateUserCart()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;

            if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
            {
                await WebshopApiService.PutAsync<CartDto, List<CartItemDto>>(WebshopApiEndpoints.PutCart, CartItems);
            }
        }
    }

    private async void UpdatePrice(object? sender, KeyValuePair<string, decimal> exchangeRate)
    {
        try
        {
            await InvokeAsync(() =>
            {
                ExchangeRate = exchangeRate;
                StateHasChanged();
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
