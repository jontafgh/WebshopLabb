@inject IOrderService OrderService
@inject IUserService UserService

@if (Order == null)
{
    <p>Loading...</p>
}
else
{
    <ProductTable Items="Order.CartItems" Context="orderLine" Caption="Order summary">
        <TableHeader>
            <th>Product</th>
            <th>ArNr</th>
            <th>Price</th>
            <th>Quantity</th>
        </TableHeader>
        <RowTemplate>
            <td data-label="Product">@orderLine.Name</td>
            <td data-label="ArtNr">@orderLine.ArtNr</td>
            <td data-label="Price">@orderLine.Price</td>
            <td data-label="Quantity">@orderLine.Quantity</td>
        </RowTemplate>
        <TableFooter>
            <th colspan="3">Total: </th>
            <td>@GetTotalPrice()</td>
        </TableFooter>
    </ProductTable>

    <div class ="white padding-x padding-y margin-y border">
        <div>
            <h4>Confirmation email sent to:</h4>
            <p>@UserDetails.Email</p>
        </div>

        <div>
            <h4>Order will be sent to:</h4>
            <ul>
                <li>@UserDetails.FirstName @UserDetails.LastName</li>
                <li>@UserDetails.Address!.Street</li>
                <li>@UserDetails.Address.PostalCode @UserDetails.Address.City</li>
                <li>@UserDetails.Address.Country</li>
            </ul>
        </div>
    </div>
}

@code {
    [Parameter] public required int OrderId { get; set; }

    public OrderDto? Order { get; set; }
    public required UserDetailsDto UserDetails { get; set; }

    protected override void OnInitialized()
    {
        UserDetails = new UserDetailsDto();
    }

    protected override async Task OnParametersSetAsync()
    {
        Order = await OrderService.GetOrder(OrderId);
        UserDetails = await UserService.GetUserDetails();
    }

    private decimal GetTotalPrice() => Order!.CartItems.Sum(x => x.Price * x.Quantity);
}
