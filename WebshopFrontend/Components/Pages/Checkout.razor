@page "/checkout"
@using System.Text.Json
@using WebshopFrontend.EventHandlers
@inject NotifyCartUpdated NotifyCartUpdated
@rendermode InteractiveServer
@inject IJSRuntime Js
@inject IHttpClientFactory Http

<h3>Checkout</h3>

@if (_boardgames != null)
{
    <div class="checkout-table-container">
        <table class="checkout-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>ArNr</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th>Quantity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in _boardgames)
                {
                    <tr>
                        <td>@product.Key.Name</td>
                        <td>@product.Key.ArtNr</td>
                        <td>@product.Key.Price.Regular</td>
                        <td>@(product.Key.Price.Regular * product.Value)</td>
                        <td>@product.Value</td>
                        <td>
                            <button class="checkout-table-button">
                                <i class="fa fa-plus" aria-hidden="true" @key="@product.Key.ArtNr" @onclick="@(() => UpdateProductQuantity(1, product.Key.ArtNr))"></i>
                            </button>

                            <button class="margin-x checkout-table-button">
                                <i class="fa fa-minus" aria-hidden="true" @key="@product.Key.ArtNr" @onclick="@(() => UpdateProductQuantity(-1, product.Key.ArtNr))"></i>
                            </button>

                            <button class="checkout-table-button">
                                <i class="fa fa-times" aria-hidden="true" @key="@product.Key.ArtNr" @onclick="@(() => UpdateProductQuantity(0, product.Key.ArtNr))"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="5">Total: </th>
                    <td>
                        @GetTotalPrice()
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>

}


@code {
    private Dictionary<BoardgameDto, int>? _boardgames;
    private List<string> _articleNumbers = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var json = await Js.InvokeAsync<string>("GetProductsFromLocalStorageAsString");
            _articleNumbers = JsonSerializer.Deserialize<List<string>>(json) ?? [];
            
            _boardgames = await LoadProducts();

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateProductQuantity(int quantity, string artNr)
    {
        var boardgame = _boardgames.Keys.First(b => b.ArtNr == artNr);

        switch (quantity)
        {
            case 1:
                _boardgames[boardgame]++;
                await AddToCart(artNr);
                break;
            case -1:
                switch (_boardgames[boardgame])
                {
                    case > 1:
                        _boardgames[boardgame]--;
                        await RemoveFromCart(artNr);
                        break;
                    case 1:
                        _boardgames.Remove(boardgame);
                        await RemoveFromCart(artNr);
                        break;
                    default:
                        _boardgames.Remove(boardgame);
                        NotifyCartUpdated.NotifyCartUpdate(this);
                        break;
                }
                break;
            case 0:
                for (var i = 0; i < _boardgames[boardgame]; i++)
                {
                    await RemoveFromCart(artNr);
                }
                _boardgames.Remove(boardgame);
                break;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task AddToCart(string artNr)
    {
        await Js.InvokeVoidAsync("AddProductToLocalStorage", artNr);
        NotifyCartUpdated.NotifyCartUpdate(this);
    }

    private async Task RemoveFromCart(string artNr)
    {
        await Js.InvokeVoidAsync("RemoveProductFromLocalStorage", artNr);
        NotifyCartUpdated.NotifyCartUpdate(this);
    }

    private decimal GetTotalPrice()
    {
        return _boardgames!.Sum(boardgame => boardgame.Key.Price.Regular * boardgame.Value);
    }

    private async Task<Dictionary<BoardgameDto, int>> LoadProducts()
    {
        using var client = Http.CreateClient("WebshopMinimalApi");

        var boardgames = new Dictionary<BoardgameDto, int>();

        foreach (var articleNumber in _articleNumbers)
        {
            var boardgame = await client.GetFromJsonAsync<BoardgameDto>($"products/article/{articleNumber}");

            if (boardgame == null) continue;
            if (boardgames.Keys.Any(b => b.ArtNr == boardgame.ArtNr))
            {
                boardgames[boardgames.Keys.First(b => b.ArtNr == boardgame.ArtNr)]++;
            }
            else
            {
                boardgames.Add(boardgame, 1);
            }
        }
        return boardgames;
    }
}
