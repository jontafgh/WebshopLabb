@inject IOrderService OrderService
@inject IUserService UserService

@if (Order == null)
{ 
    <p>Loading...</p>
}
else
{
    <table class="checkout-table">
        <caption>Order summary</caption>
        <thead>
        <tr>
            <th>Product</th>
            <th>ArNr</th>
            <th>DiscountPrice</th>
            <th>Quantity</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var orderLine in Order.CartItems)
        {
            <tr>
                <td data-label="Product">@orderLine.Name</td>
                <td data-label="ArNr">@orderLine.ArtNr</td>
                <td data-label="DiscountPrice">@orderLine.Price</td>
                <td data-label="Quantity">@orderLine.Quantity</td>
            </tr>
        }
        </tbody>
        <tfoot>
        <tr>
            <th colspan="3">Total: </th>
            <td>
                @GetTotalPrice()
            </td>
        </tr>
        </tfoot>
    </table>

    <div>
        <h4>Confirmation email sent to:</h4>
        <p>@UserDetails.Email</p>
    </div>

    <div>
        <h4>Order will be sent to:</h4>
        <ul>
            <li>@UserDetails.FirstName @UserDetails.LastName</li>
            <li>@UserDetails.Address!.Street</li>
            <li>@UserDetails.Address.PostalCode @UserDetails.Address.City</li>
            <li>@UserDetails.Address.Country</li>
        </ul>
    </div>
}

@code {
    [Parameter] public required int OrderId { get; set; }

    public OrderDto? Order { get; set; }
    public required UserDetailsDto UserDetails { get; set; }

    protected override void OnInitialized()
    {
        UserDetails = new UserDetailsDto();
    }

    protected override async Task OnParametersSetAsync()
    {
        Order = await OrderService.GetOrder(OrderId);
        UserDetails = await UserService.GetUserDetails();
    }

    private decimal GetTotalPrice() => Order!.CartItems.Sum(x => x.Price * x.Quantity);
}
