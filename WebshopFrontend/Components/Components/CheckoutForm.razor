@inject IUserService UserService

<EditForm Model="User" OnValidSubmit="Submit" FormName="User">
    <ObjectGraphDataAnnotationsValidator />
    <div class="form-flex-container">

        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="firstname">
                    First Name:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="firstname" @bind-Value="User.FirstName" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.FirstName)" />
            </div>
        </div>

        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="lastname">
                    Last Name:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="lastname" @bind-Value="User.LastName" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.LastName)" />
            </div>
        </div>

        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="country">
                    Country:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="country" @bind-Value="User.Address.Country" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.Address.Country)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="city">
                    City:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="city" @bind-Value="User.Address.City" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.Address.City)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="street">
                    Street:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="street" @bind-Value="User.Address.Street" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.Address.Street)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="postalcode">
                    PostalCode:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="postalcode" @bind-Value="User.Address.PostalCode" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.Address.PostalCode)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="phonenumber">
                    Phone:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="phonenumber" @bind-Value="User.PhoneNumber" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => User.PhoneNumber)" />
            </div>
        </div>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

@if (_success)
{
    <p>Form submitted successfully</p>
}


@code {

    [SupplyParameterFromForm] public UserDto User { get; set; } = new UserDto();

    [Parameter] public EventCallback<UserDto> OnFormSubmit { get; set; }

    private bool _success = false;

    private async Task Submit()
    {
        //var currntUserInfo = await UserService.GetUserId();
        //var currentUser = JsonSerializer.Deserialize<UserDto>(currntUserInfo, JsonSerializerOptions.Web);
        // User.Id = currentUser.Id;
        // _success = await UserService.UpdateUserInfo(User);
    }
}
