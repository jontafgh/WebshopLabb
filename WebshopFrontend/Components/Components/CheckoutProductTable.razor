@using WebshopFrontend.Services.Interfaces
@rendermode InteractiveServer
@inject ICounterService CounterService
@inject ICartService CartService

@if (CartItems == null || CartItems.Count == 0)
{
    <p>There are no products in the cart</p>

}
else
{
    <table class="checkout-table">
        <caption>Products in cart</caption>
        <thead>
            <tr>
                <th>Product</th>
                <th>ArNr</th>
                <th>DiscountPrice</th>
                <th>Total</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cartItem in CartItems)
            {
                <tr>
                    <td data-label="Product">@cartItem.Name</td>
                    <td data-label="ArNr">@cartItem.ArtNr</td>
                    <td data-label="DiscountPrice">@cartItem.Price</td>
                    <td data-label="Total">@(cartItem.Quantity * cartItem.Price)</td>
                    <td data-label="Quantity">@cartItem.Quantity</td>
                    <td data-label="">
                        <button class="checkout-table-button">
                            <i class="fa fa-plus" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(1, cartItem.Id))"></i>
                        </button>

                        <button class="margin-x checkout-table-button">
                            <i class="fa fa-minus" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(-1, cartItem.Id))"></i>
                        </button>

                        <button class="checkout-table-button">
                            <i class="fa fa-times" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(0, cartItem.Id))"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="5">Total: </th>
                <td>
                    @GetTotalPrice()
                </td>
            </tr>
        </tfoot>
    </table>
}


@code {

    public List<CartItemDto> CartItems { get; set; }

    private int _userId = 1;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CartItems = await CartService.GetAll(_userId);
            await InvokeAsync(StateHasChanged);
        }
    }

    private decimal GetTotalPrice() => CartItems.Sum(cartItem => cartItem.Quantity * cartItem.Price);

    private async Task UpdateProductQuantity(int action, int id)
    {
        var cartItem = CartItems.First(cartItem => cartItem.Id == id);
        switch (action)
        {
            case 1:
                await CartService.UpdateItem(new CartItemToUpdateDto { Id = cartItem.Id, Quantity = cartItem.Quantity + 1 });
                CounterService.AddToCount(1);
                break;
            case -1:
                if (cartItem.Quantity > 1)
                {
                    await CartService.UpdateItem(new CartItemToUpdateDto { Id = cartItem.Id, Quantity = cartItem.Quantity - 1 });
                    CounterService.AddToCount(-1);
                }
                else
                {
                    await CartService.RemoveItem(cartItem.Id);
                    CounterService.AddToCount(-cartItem.Quantity);
                }
                break;
            case 0:
                await CartService.RemoveItem(cartItem.Id);
                CounterService.AddToCount(-cartItem.Quantity);
                break;
        }
        CartItems = await CartService.GetAll(_userId);

        await InvokeAsync(StateHasChanged);
    }
}
