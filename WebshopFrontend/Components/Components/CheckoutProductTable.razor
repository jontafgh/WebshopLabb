@using System.Text.Json
@using WebshopFrontend.Components.Components
@using WebshopFrontend.EventHandlers
@inject NotifyCartUpdated NotifyCartUpdated
@rendermode InteractiveServer
@inject IJSRuntime Js
@inject IHttpClientFactory Http

@if (_products.Any())
{
    <table class="checkout-table">
        <caption>Products in cart</caption>
        <thead>
            <tr>
                <th>Product</th>
                <th>ArNr</th>
                <th>Price</th>
                <th>Total</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _articlesQuantities)
            {
                <tr>
                    <td data-label="Product">@GetProduct(product.Key).Name</td>
                    <td data-label="ArNr">@GetProduct(product.Key).ArtNr</td>
                    <td data-label="Price"><Price Product="GetProduct(product.Key)" FontSizePx="15"></Price></td>
                    <td data-label="Total">@GetTotalPricePerProduct(product.Key)</td>
                    <td data-label="Quantity">@product.Value</td>
                    <td data-label="">
                        <button class="checkout-table-button">
                            <i class="fa fa-plus" aria-hidden="true" @key="@product.Key" @onclick="@(() => UpdateProductQuantity(1, product.Key))"></i>
                        </button>

                        <button class="margin-x checkout-table-button">
                            <i class="fa fa-minus" aria-hidden="true" @key="@product.Key" @onclick="@(() => UpdateProductQuantity(-1, product.Key))"></i>
                        </button>

                        <button class="checkout-table-button">
                            <i class="fa fa-times" aria-hidden="true" @key="@product.Key" @onclick="@(() => UpdateProductQuantity(0, product.Key))"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="5">Total: </th>
                <td>
                    @GetTotalPrice()
                </td>
            </tr>
        </tfoot>
    </table>
}


@code {
    private Dictionary<string, int> _articlesQuantities = new();
    private List<string> _articleNumbers = [];
    private List<IProduct> _products = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var json = await Js.InvokeAsync<string>("GetProductsFromLocalStorageAsString");
            _articleNumbers = JsonSerializer.Deserialize<List<string>>(json) ?? [];

            await LoadProducts();

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateProductQuantity(int action, string artNr)
    {
        var product = _products.First(product => product.ArtNr == artNr);

        switch (action)
        {
            case 1:
                _articlesQuantities[artNr]++;
                await AddToCart(artNr);
                break;
            case -1:
                switch (_articlesQuantities[artNr])
                {
                    case > 1:
                        _articlesQuantities[artNr]--;
                        await RemoveFromCart(artNr);
                        break;
                    case 1:
                        _articlesQuantities.Remove(artNr);
                        _products.Remove(product);
                        await RemoveFromCart(artNr);
                        break;
                    default:
                        _articlesQuantities.Remove(artNr);
                        NotifyCartUpdated.NotifyCartUpdate(this);
                        break;
                }
                break;
            case 0:
                for (var i = 0; i < _articlesQuantities[artNr]; i++)
                {
                    await RemoveFromCart(artNr);
                }
                _articlesQuantities.Remove(artNr);
                _products.Remove(product);
                break;
        }
    }

    public decimal GetTotalPricePerProduct(string artNr)
    {
        var boardgame = _products.First(product => product.ArtNr == artNr);

        if (boardgame.Price.Discount != null)
        {
            return boardgame.Price.Discount.Price * _articlesQuantities[artNr];
        }
        return boardgame.Price.Regular * _articlesQuantities[artNr];
    }


    public IProduct GetProduct(string artNr)
    {
        return _products.First(product => product.ArtNr == artNr);
    }

    private async Task AddToCart(string artNr)
    {
        await Js.InvokeVoidAsync("AddProductToLocalStorage", artNr);
        NotifyCartUpdated.NotifyCartUpdate(this);
    }

    private async Task RemoveFromCart(string artNr)
    {
        await Js.InvokeVoidAsync("RemoveProductFromLocalStorage", artNr);
        NotifyCartUpdated.NotifyCartUpdate(this);
    }

    private decimal GetTotalPrice()
    {
        return _products!.Sum(b => b.Price.Regular * _articlesQuantities[b.ArtNr]);
    }

    private async Task LoadProducts()
    {
        using var client = Http.CreateClient("WebshopMinimalApi");

        foreach (var articleNumber in _articleNumbers)
        {
            var boardgame = await client.GetFromJsonAsync<BoardgameDto>($"products/article/{articleNumber}");

            if (boardgame == null) continue;
            if (!_articlesQuantities.TryAdd(boardgame.ArtNr, 1))
            {
                _articlesQuantities[boardgame.ArtNr]++;
            }
            else
            {
                _products.Add(boardgame);
            }
        }
    }
}
