@inject ICounterService CounterService
@inject ICartService CartService

@if (CartItems.Count == 0)
{
    <p>There are no products in the cart</p>

}
else
{
    <table class="checkout-table">
        <caption>Products in cart</caption>
        <thead>
            <tr>
                <th>Product</th>
                <th>ArNr</th>
                <th>Price</th>
                <th>Total</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cartItem in CartItems)
            {
                <tr>
                    <td data-label="Product">@cartItem.Name</td>
                    <td data-label="ArNr">@cartItem.ArtNr</td>
                    <td data-label="Price">@cartItem.Price</td>
                    <td data-label="Total">@(cartItem.Quantity * cartItem.Price)</td>
                    <td data-label="Quantity">@cartItem.Quantity</td>
                    <td data-label="">
                        <button class="checkout-table-button">
                            <i class="fa fa-plus" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(1, cartItem.Id))"></i>
                        </button>

                        <button class="margin-x checkout-table-button">
                            <i class="fa fa-minus" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(-1, cartItem.Id))"></i>
                        </button>

                        <button class="checkout-table-button">
                            <i class="fa fa-times" aria-hidden="true" @key="@cartItem.Id" @onclick="@(() => UpdateProductQuantity(0, cartItem.Id))"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="5">Total: </th>
                <td>
                    @GetTotalPrice()
                </td>
            </tr>
        </tfoot>
    </table>
}


@code {
    private List<CartItemDto> CartItems { get; set; } = [];

    [Parameter] public EventCallback<bool> OnEmptyCart { get; set; }

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CartItems = await CartService.GetLocalStorageCartItems();
            await UpdateUserCart();
            await InvokeAsync(StateHasChanged);
        }

        if (CartItems.Count == 0)
        {
            await OnEmptyCart.InvokeAsync(true);
        }
    }

    private decimal GetTotalPrice() => CartItems.Sum(cartItem => cartItem.Quantity * cartItem.Price);

    private async Task UpdateProductQuantity(int action, int id)
    {
        var cartItem = CartItems.First(cartItem => cartItem.Id == id);

        switch (action)
        {
            case 1:
                IncrementQuantity(cartItem);
                break;
            case -1:
                DecrementQuantity(cartItem);
                break;
            case 0:
                RemoveItem(cartItem);
                break;
        }

        await UpdateCartAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateCartAsync()
    {
        await CartService.UpdateLocalStorageCart(CartItems);
        await UpdateUserCart();
        CartItems = await CartService.GetLocalStorageCartItems();
    }

    private void RemoveItem(CartItemDto cartItem)
    {
        CounterService.AddToCount(-cartItem.Quantity);
        CartItems.Remove(cartItem);
    }

    private void IncrementQuantity(CartItemDto cartItem)
    {
        cartItem.Quantity++;
        CounterService.AddToCount(1);
    }

    private void DecrementQuantity(CartItemDto cartItem)
    {
        if (cartItem.Quantity > 1)
        {
            cartItem.Quantity--;
            CounterService.AddToCount(-1);
        }
        else
        {
            RemoveItem(cartItem);
        }
    }

    private async Task UpdateUserCart()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            if (authState.User?.Identity is not null && authState.User.Identity.IsAuthenticated)
                await CartService.UpdateUserCart(CartItems);
        }
    }
}
