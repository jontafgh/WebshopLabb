@using WebshopShared.Validation
@inject IUserService UserService

<h3>Please comfirm your shipping details</h3>

<EditForm Model="UserDetails" OnValidSubmit="Submit" FormName="UserDetails">
    <ObjectGraphDataAnnotationsValidator />
    <div class="form-flex-container">

        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="firstname">
                    First Name:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="firstname" @bind-Value="UserDetails.FirstName" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.FirstName)" />
            </div>
        </div>

        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="lastname">
                    Last Name:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="lastname" @bind-Value="UserDetails.LastName" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.LastName)" />
            </div>
        </div>

        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="country">
                    Country:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="country" @bind-Value="UserDetails.Address.Country" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.Address.Country)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="city">
                    City:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="city" @bind-Value="UserDetails.Address.City" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.Address.City)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="street">
                    Street:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="street" @bind-Value="UserDetails.Address.Street" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.Address.Street)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="postalcode">
                    PostalCode:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="postalcode" @bind-Value="UserDetails.Address.PostalCode" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.Address.PostalCode)" />
            </div>
        </div>


        <div class="form-flex-row">
            <div class="form-flex-item">
                <label for="phonenumber">
                    Phone:
                </label>
            </div>

            <div class="form-flex-item">
                <InputText class="input-text" id="phonenumber" @bind-Value="UserDetails.PhoneNumber" />
            </div>

            <div class="form-flex-item">
                <ValidationMessage For="@(() => UserDetails.PhoneNumber)" />
            </div>
        </div>
    </div>
    <div>
        <button type="submit">Comfirm</button>

    </div>
</EditForm>

<button @onclick="FillForm" type="submit">Get Info</button>

@code {

    [SupplyParameterFromForm] private UserDetails? UserDetails { get; set; }

    [Parameter] public EventCallback<UserDetails> OnFormSubmit { get; set; }

    private bool _formSet;

    protected override void OnInitialized()
    {
        UserDetails = new UserDetails();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!_formSet)
            UserDetails = await GetExistingUserDetails();
        _formSet = true;
    }

    private async Task<UserDetails> GetExistingUserDetails()
    {
        var existingUserDetails = await UserService.GetUserDetails();

        return new UserDetails
            {
                FirstName = existingUserDetails.FirstName ?? string.Empty,
                LastName = existingUserDetails.LastName ?? string.Empty,
                Address = existingUserDetails.Address == null ? new AddressDetails() : new AddressDetails
                {
                    Country = existingUserDetails.Address.Country ?? string.Empty,
                    City = existingUserDetails.Address.City ?? string.Empty,
                    Street = existingUserDetails.Address.Street ?? string.Empty,
                    PostalCode = existingUserDetails.Address.PostalCode ?? string.Empty
                },
                PhoneNumber = existingUserDetails.PhoneNumber ?? string.Empty
            };
    }

    private async Task Submit()
    {
        await OnFormSubmit.InvokeAsync(UserDetails);
    }

    private async Task FillForm()
    {
        UserDetails = await GetExistingUserDetails();
    }

}
