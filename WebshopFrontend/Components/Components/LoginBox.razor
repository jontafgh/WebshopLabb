@inject IUserService UserService

<div class="login-box padding-y padding-x-16 border">
    <AuthorizeView>
        <Authorized>
            <p>You're logged in as @context.User.Identity?.Name.</p>
        </Authorized>
        <NotAuthorized>

            <div class="padding-y">
                <label for="email">
                    Email:
                    <InputText id="email" class="input-text" @bind-value="@_loginDto.Email"></InputText>
                </label>
            </div>

            <div class="padding-y">
                <label for="password">
                    Password:
                    <InputText id="password" type="password" class="input-text" @bind-value="@_loginDto.Password"></InputText>
                </label>
            </div>
            <button type="button" class="button-fit padding-x padding-y text-large" @onclick="LogIn">Log In</button>

            @foreach (var error in _registerLoginResponseDto.ErrorList)
            {
                <p class="validation-message">@error</p>
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private LoginDto _loginDto = new();
    private RegisterLoginResponseDto _registerLoginResponseDto = new();

    [Parameter] public EventCallback OnLogin { get; set; }

    private async Task LogIn()
    {
        _registerLoginResponseDto = await UserService.LoginAsync(_loginDto);

        if (_registerLoginResponseDto.Succeeded)
        {
            await OnLogin.InvokeAsync();
        }
    }

}
